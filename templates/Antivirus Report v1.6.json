{
  "base_template": {
    "name": "TRMM_Base v1.1",
    "html": "<html>\n\n<head>\n    <style>\n        /* —— PDF page settings —— */\n        @page {\n            margin: 0.5in;\n            size: letter portrait;\n        }\n\n        /* —— Color palette (theme) —— */\n        :root {\n            --header-bg: #2c3e50;\n            --header-text: #ffffff;\n            --border-color: #dddddd;\n            --table-header-bg: #f2f2f2;\n            --status-ready-bg: #eaf7ec;\n            --status-ready-badge: #28a745;\n            --status-not-ready-bg: #fbebee;\n            --status-not-ready-badge: #dc3545;\n            --status-unknown-bg: #fff9e6;\n            --status-unknown-badge: #ffc107;\n            --badge-already-bg: #17a2b8;\n        }\n\n        /* —— Typography & utilities (structure) —— */\n        body {\n            font-family: sans-serif;\n            color: #333;\n            font-size: 12px;\n        }\n\n        .section {\n            margin-top: 20px;\n        }\n\n        .text-danger {\n            color: #a94442;\n            font-weight: bold;\n        }\n\n        /* —— Header layout (structure) —— */\n        .report-header {\n            background-color: var(--header-bg);\n            color: var(--header-text);\n            padding: 20px;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n        }\n\n        .header-logo {\n            width: 80px;\n            margin-right: 25px;\n            flex-shrink: 0;\n        }\n\n        .header-date {\n            margin-left: auto;\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .report-header h1 {\n            font-size: 24px;\n            margin: 0 0 5px;\n        }\n\n        .report-header h2 {\n            font-size: 16px;\n            margin: 0;\n            opacity: 0.9;\n        }\n\n        /* —— Standardized Table Styles (structure) —— */\n        .report-table {\n            border-collapse: collapse;\n            width: 100%;\n        }\n\n        .report-table th,\n        .report-table td {\n            border: 1px solid var(--border-color);\n            padding: 6px 8px;\n            text-align: left;\n            vertical-align: top;\n        }\n\n        .report-table thead th {\n            background-color: var(--table-header-bg);\n            font-weight: bold;\n            cursor: pointer;\n            user-select: none;\n        }\n\n        /* Header label + sort indicators */\n        .th-topline {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            gap: .4rem;\n        }\n\n        .th-label {\n            position: relative;\n            cursor: pointer;\n            user-select: none;\n        }\n\n        /* These are the specific rules that make the indicator visible */\n        th.sorted.asc .th-label::after {\n            content: \"▲\";\n            padding-left: .4rem;\n            color: #333;\n            font-size: .9em;\n        }\n\n        th.sorted.desc .th-label::after {\n            content: \"▼\";\n            padding-left: .4rem;\n            color: #333;\n            font-size: .9em;\n        }\n\n        .report-table thead th select {\n            width: 100%;\n            margin-top: 5px;\n            padding: 4px;\n            border-radius: 4px;\n            border: 1px solid #ccc;\n            font-weight: normal;\n            background: #fff;\n        }\n\n        /* —— Badge shape (structure) —— */\n        .status-badge {\n            display: inline-block;\n            padding: 4px 10px;\n            border-radius: 12px;\n            color: #fff;\n            font-weight: bold;\n            font-size: 11px;\n            text-align: center;\n            white-space: nowrap;\n        }\n\n        /* —— Stub classes for per‑report overrides —— */\n        .status-ready {}\n\n        .status-not-ready {}\n\n        .status-unknown {}\n\n        .badge-ready {}\n\n        .badge-not-ready {}\n\n        .badge-unknown {}\n\n        .badge-already {}\n    </style>\n</head>\n\n<body>\n    {% block content %}{% endblock %}\n</body>\n\n</html>"
  },
  "template": {
    "name": "Antivirus Report v1.6",
    "template_css": "",
    "template_md": "{% block content %}\r\n<style>\r\n  @page { margin: 0.5in; size: letter landscape; }\r\n  /* Add some basic styling for a cleaner look */\r\n</style>\r\n\r\n<div class=\"report-header\">\r\n  <div class=\"header-logo\">\r\n    <img src=\"https://github.com/amidaware/reporting-templates/blob/master/assets/gbtnavy%20(256).png?raw=true\" alt=\"Amidaware Logo\" style=\"width: 80px; height: auto;\">\r\n  </div>\r\n  <div class=\"header-titles\">\r\n    <h1>Antivirus Report</h1>\r\n    <h2 id=\"report-subtitle\">Client: All | Site: All</h2>\r\n    <div class=\"row-count\" aria-live=\"polite\">\r\n      Filtered Row Count: <strong><span id=\"visibleCount\">0</span></strong> of <span id=\"totalCount\">{{ data_sources.agentsList | length }}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"header-date\">\r\n    <h2>Report Date:<br>{{ report_run_timestamp.strftime('%B %d, %Y') }}</h2>\r\n  </div>\r\n</div>\r\n\r\n{% set clients = data_sources.agentsList | map(attribute='site__client__name') | unique | sort %}\r\n{% set sites = data_sources.agentsList | map(attribute='site__name') | unique | sort %}\r\n\r\n<table id=\"reportTable\" class=\"report-table\" aria-describedby=\"report-subtitle\">\r\n  <thead>\r\n    <tr>\r\n      <!-- Client (col 0) -->\r\n      <th data-col=\"client\">\r\n        <div class=\"th-topline\">\r\n          <span class=\"th-label\">Client</span>\r\n          <span class=\"sort-indicator\" data-for-col=\"0\"></span>\r\n        </div>\r\n        <select id=\"clientFilterH\" aria-label=\"Client filter\">\r\n          <option value=\"all\">All Clients</option>\r\n          {% for client in clients %}\r\n          <option value=\"{{ client }}\">{{ client }}</option>\r\n          {% endfor %}\r\n        </select>\r\n      </th>\r\n\r\n      <!-- Site (col 1) -->\r\n      <th data-col=\"site\">\r\n        <div class=\"th-topline\">\r\n          <span class=\"th-label\">Site</span>\r\n          <span class=\"sort-indicator\" data-for-col=\"1\"></span>\r\n        </div>\r\n        <select id=\"siteFilterH\" aria-label=\"Site filter\">\r\n          <option value=\"all\">All Sites</option>\r\n          {% for site in sites %}\r\n          <option value=\"{{ site }}\">{{ site }}</option>\r\n          {% endfor %}\r\n        </select>\r\n      </th>\r\n\r\n      <th data-col=\"device\">\r\n        <div class=\"th-topline\">\r\n          <span class=\"th-label\">Device Name</span>\r\n          <span class=\"sort-indicator\" data-for-col=\"2\"></span>\r\n        </div>\r\n      </th>\r\n\r\n      <th data-col=\"user\">\r\n        <div class=\"th-topline\">\r\n          <span class=\"th-label\">User</span>\r\n          <span class=\"sort-indicator\" data-for-col=\"3\"></span>\r\n        </div>\r\n        <select id=\"user-filter-h\" aria-label=\"User filter\">\r\n          <option value=\"all\">All Users</option>\r\n        </select>\r\n      </th>\r\n\r\n      <th data-col=\"os\">\r\n        <div class=\"th-topline\">\r\n          <span class=\"th-label\">Device OS</span>\r\n          <span class=\"sort-indicator\" data-for-col=\"4\"></span>\r\n        </div>\r\n        <select id=\"os-filter-h\" aria-label=\"OS filter\">\r\n          <option value=\"all\">All OS</option>\r\n        </select>\r\n      </th>\r\n\r\n      <th data-col=\"av\">\r\n        <div class=\"th-topline\">\r\n          <span class=\"th-label\">Antivirus</span>\r\n          <span class=\"sort-indicator\" data-for-col=\"5\"></span>\r\n        </div>\r\n        <select id=\"av-filter-h\" aria-label=\"Antivirus filter\">\r\n          <option value=\"all\">All Antivirus</option>\r\n        </select>\r\n      </th>\r\n    </tr>\r\n  </thead>\r\n\r\n  <tbody id=\"report-table-body\">\r\n    {% for item in data_sources.agentsList %}\r\n    <tr>\r\n      <td class=\"cell-client\">{{ item.site__client__name }}</td>\r\n      <td class=\"cell-site\">{{ item.site__name }}</td>\r\n      <td class=\"cell-device\" data-sort-value=\"{{ item.hostname }}\">\r\n        <b class=\"device-name\">{{ item.hostname }}</b><br>\r\n        {% if item.last_seen %}\r\n        <small class=\"last-seen {% if (report_run_timestamp - item.last_seen).days > 30 %}text-danger{% endif %}\" data-sort-value=\"{{ item.last_seen.isoformat() }}\">\r\n          Last Seen: {{ item.last_seen.astimezone(ZoneInfo('America/New_York')).strftime('%Y-%m-%d %H:%M:%S') }}\r\n        </small>\r\n        {% else %}\r\n        <small class=\"last-seen\" data-sort-value=\"N/A\">&nbsp;</small>\r\n        {% endif %}\r\n      </td>\r\n      <td class=\"cell-user\">{{ item.last_logged_in_user }}</td>\r\n      <td class=\"cell-os\">{{ item.operating_system }}</td>\r\n      <td class=\"cell-av\">\r\n        {% if item.custom_fields and 'Antivirus' in item.custom_fields %}\r\n          {{ item.custom_fields.Antivirus }}\r\n        {% endif %}\r\n      </td>\r\n    </tr>\r\n    {% endfor %}\r\n  </tbody>\r\n</table>\r\n\r\n<script>\r\n(function() {\r\n  const $  = s => document.querySelector(s);\r\n  const $$ = s => Array.from(document.querySelectorAll(s));\r\n  const tbody = $('#report-table-body');\r\n\r\n  const selects = {\r\n    client: $('#clientFilterH'),\r\n    site:   $('#siteFilterH'),\r\n    user:   $('#user-filter-h'),\r\n    os:     $('#os-filter-h'),\r\n    av:     $('#av-filter-h')\r\n  };\r\n\r\n  let currentSort = { colIndex: null, dirAsc: true };\r\n\r\n  function getCellText(row, selector, fallbackIndex=null) {\r\n    const el = row.querySelector(selector);\r\n    if (el) return el.textContent.trim();\r\n    if (fallbackIndex !== null) return row.cells[fallbackIndex].textContent.trim();\r\n    return '';\r\n  }\r\n\r\n  function buildOptionsFromSet(selectEl, set, allLabel) {\r\n    if (!selectEl) return;\r\n    const current = selectEl.value || 'all';\r\n    const opts = [ `<option value=\"all\">${allLabel}</option>` ]\r\n      .concat([...set].sort((a,b)=>String(a).localeCompare(String(b), undefined, {numeric:true, sensitivity:'base'}))\r\n      .map(v => `<option value=\"${String(v)}\">${String(v)}</option>`));\r\n    selectEl.innerHTML = opts.join('');\r\n    if ([...set].includes(current) || current === 'all') selectEl.value = current;\r\n  }\r\n\r\n  function updateDropdownsFromVisible() {\r\n    const rows = $$('#reportTable tbody tr').filter(r => r.style.display !== 'none');\r\n    const clients = new Set(), sites = new Set(), users = new Set(), oss = new Set(), avs = new Set();\r\n\r\n    rows.forEach(r => {\r\n      clients.add(getCellText(r, '.cell-client', 0));\r\n      sites.add(getCellText(r, '.cell-site', 1));\r\n      const user = getCellText(r, '.cell-user', 3); if (user) users.add(user);\r\n      const os   = getCellText(r, '.cell-os', 4);   if (os)   oss.add(os);\r\n      const av   = getCellText(r, '.cell-av', 5);   if (av)   avs.add(av);\r\n    });\r\n\r\n    buildOptionsFromSet(selects.client, clients, 'All Clients');\r\n    buildOptionsFromSet(selects.site,   sites,   'All Sites');\r\n    buildOptionsFromSet(selects.user,   users,   'All Users');\r\n    buildOptionsFromSet(selects.os,     oss,     'All OS');\r\n    buildOptionsFromSet(selects.av,     avs,     'All Antivirus');\r\n  }\r\n\r\n  function setSortIndicator(colIndex, dirAscOrNull) {\r\n    $$('.sort-indicator').forEach(s => s.textContent = '');\r\n    if (dirAscOrNull === null) return;\r\n    const el = $(`.sort-indicator[data-for-col=\"${colIndex}\"]`);\r\n    if (el) el.textContent = dirAscOrNull ? '▲' : '▼';\r\n  }\r\n\r\n  function filterTable() {\r\n    const clientVal = selects.client?.value || 'all';\r\n    const siteVal   = selects.site?.value   || 'all';\r\n    const userVal   = selects.user?.value   || 'all';\r\n    const osVal     = selects.os?.value     || 'all';\r\n    const avVal     = selects.av?.value     || 'all';\r\n\r\n    let visible = 0;\r\n\r\n    $$('#reportTable tbody tr').forEach(row => {\r\n      const client = getCellText(row, '.cell-client', 0);\r\n      const site   = getCellText(row, '.cell-site', 1);\r\n      const user   = getCellText(row, '.cell-user', 3);\r\n      const os     = getCellText(row, '.cell-os', 4);\r\n      const av     = getCellText(row, '.cell-av', 5);\r\n\r\n      const show = (clientVal === 'all' || client === clientVal)\r\n                && (siteVal   === 'all' || site   === siteVal)\r\n                && (userVal   === 'all' || user   === userVal)\r\n                && (osVal     === 'all' || os     === osVal)\r\n                && (avVal     === 'all' || av     === avVal);\r\n\r\n      row.style.display = show ? '' : 'none';\r\n      if (show) visible++;\r\n    });\r\n\r\n    updateDropdownsFromVisible();\r\n\r\n    const subtitle = `Client: ${clientVal === 'all' ? 'All' : clientVal} | Site: ${siteVal === 'all' ? 'All' : siteVal}`;\r\n    $('#report-subtitle').textContent = subtitle;\r\n    $('#visibleCount').textContent = String(visible);\r\n\r\n    if (currentSort.colIndex !== null) sortTable(currentSort.colIndex, currentSort.dirAsc, false);\r\n  }\r\n\r\n  function sortTable(colIndex, dirAsc = true, toggle = true) {\r\n    const rows = Array.from(tbody.rows);\r\n    const visibleRows = rows.filter(r => r.style.display !== 'none');\r\n\r\n    if (toggle) {\r\n      if (currentSort.colIndex === colIndex) currentSort.dirAsc = !currentSort.dirAsc;\r\n      else { currentSort.colIndex = colIndex; currentSort.dirAsc = true; }\r\n    } else {\r\n      currentSort.colIndex = colIndex; currentSort.dirAsc = dirAsc;\r\n    }\r\n\r\n    setSortIndicator(currentSort.colIndex, currentSort.dirAsc);\r\n\r\n    const getVal = (row, idx) => {\r\n      const cell = row.cells[idx];\r\n      return cell.getAttribute('data-sort-value') || cell.textContent.trim();\r\n    };\r\n\r\n    visibleRows.sort((a, b) => {\r\n      let cmp = 0;\r\n      // Primary Sort\r\n      if (colIndex === 2) { // Special logic for Device column\r\n        const nameA = a.querySelector('.device-name')?.textContent.trim() || a.cells[2].textContent.trim();\r\n        const nameB = b.querySelector('.device-name')?.textContent.trim() || b.cells[2].textContent.trim();\r\n        cmp = nameA.localeCompare(nameB, undefined, { numeric: true, sensitivity: 'base' });\r\n        if (cmp === 0) {\r\n          const sa = a.querySelector('.last-seen')?.getAttribute('data-sort-value') || 'N/A';\r\n          const sb = b.querySelector('.last-seen')?.getAttribute('data-sort-value') || 'N/A';\r\n          const da = new Date(sa); const db = new Date(sb);\r\n          if (!isNaN(da) && !isNaN(db)) cmp = da.getTime() - db.getTime();\r\n          else if (isNaN(da) && !isNaN(db)) cmp = 1;\r\n          else if (!isNaN(da) && isNaN(db)) cmp = -1;\r\n        }\r\n      } else {\r\n        const vA = getVal(a, colIndex);\r\n        const vB = getVal(b, colIndex);\r\n        if (!isNaN(vA) && !isNaN(vB) && vA !== '' && vB !== '') cmp = parseFloat(vA) - parseFloat(vB);\r\n        else cmp = String(vA).localeCompare(String(vB), undefined, { numeric: true, sensitivity: 'base' });\r\n      }\r\n\r\n      // Tie-breaker Sort: Client > Site\r\n      if (cmp === 0 && colIndex !== 0) {\r\n        const clientA = getVal(a, 0); const clientB = getVal(b, 0);\r\n        cmp = String(clientA).localeCompare(String(clientB), undefined, { numeric: true, sensitivity: 'base' });\r\n      }\r\n      if (cmp === 0 && colIndex !== 1) {\r\n        const siteA = getVal(a, 1); const siteB = getVal(b, 1);\r\n        cmp = String(siteA).localeCompare(String(siteB), undefined, { numeric: true, sensitivity: 'base' });\r\n      }\r\n\r\n      return currentSort.dirAsc ? cmp : -cmp;\r\n    });\r\n\r\n    tbody.innerHTML = '';\r\n    visibleRows.forEach(r => tbody.appendChild(r));\r\n    rows.filter(r => r.style.display === 'none').forEach(r => tbody.appendChild(r));\r\n  }\r\n\r\n  // Header click-to-sort; ignore clicks on the <select>\r\n  $$('#reportTable thead th').forEach((th, idx) => {\r\n    th.addEventListener('click', (e) => {\r\n      if (e.target && e.target.tagName && e.target.tagName.toLowerCase() === 'select') return;\r\n      sortTable(idx, true, true);\r\n    });\r\n  });\r\n\r\n  // Wire header selects\r\n  [selects.client, selects.site, selects.user, selects.os, selects.av]\r\n    .filter(Boolean)\r\n    .forEach(sel => sel.addEventListener('change', filterTable));\r\n\r\n  function init() {\r\n    updateDropdownsFromVisible();\r\n    filterTable();\r\n    // Initial sort by Client (which will tie-break on Site)\r\n    sortTable(0, true, false);\r\n  }\r\n  document.addEventListener('DOMContentLoaded', init);\r\n})();\r\n</script>\r\n{% endblock %}",
    "type": "html",
    "depends_on": [],
    "template_variables": "data_sources:\n  agentsList:\n    custom_fields:\n      - Antivirus\n    model: agent\n    only:\n      - hostname\n      - site__client__name\n      - site__name\n      - operating_system\n      - last_seen\n      - last_logged_in_user\nreport_run_timestamp: !now"
  },
  "assets": []
}