{
  "base_template": {
    "name": "Jinja Base Template",
    "html": "<html>\n    <head>\n        <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n        <style>\n            {{ css }}\n        </style>\n    </head>\n    <body>\n        {% block content %}{% endblock %}\n    </body>\n</html>"
  },
  "template": {
    "name": "NOC Dashboard v1.25",
    "template_css": "",
    "template_md": "{% block content %}\r\n\r\n<!-- Fixed header bar -->\r\n<div style=\"position: fixed; top: 0; left: 0; width: 100%; background: #fff; z-index: 1000; height: 40px; padding: 4px; border-bottom: 1px solid #ddd;\">\r\n  <div style=\"display: flex; align-items: center; gap: 15px; white-space: nowrap; height: 100%;\">\r\n    <!-- Title -->\r\n    <h1 style=\"margin: 0; flex-shrink: 0;\">NOC Dashboard v1.25</h1>\r\n\r\n    <!-- Restrict Summary Button & Dropdown -->\r\n    <div style=\"position: relative; display: inline-block; flex-shrink: 0;\">\r\n      <button id=\"alertDropdownBtn\" style=\"cursor: pointer; padding: 3px 6px;\">\r\n        Restrict summary to offline agents with these Alerts set\r\n      </button>\r\n      <div id=\"alertDropdownMenu\"\r\n           style=\"display: none; position: absolute; background: #fff; border: 1px solid #ccc; padding: 10px; z-index: 999; min-width: 140px; margin-top: 4px;\">\r\n        <label style=\"display: block; margin-bottom: 5px;\">\r\n          <input type=\"checkbox\" id=\"alertAll\"> All\r\n        </label>\r\n        <label style=\"display: block; margin-bottom: 5px;\">\r\n          <input type=\"checkbox\" id=\"alertText\"> Text Alert\r\n        </label>\r\n        <label style=\"display: block; margin-bottom: 5px;\">\r\n          <input type=\"checkbox\" id=\"alertEmail\"> Email Alert\r\n        </label>\r\n        <label style=\"display: block;\">\r\n          <input type=\"checkbox\" id=\"alertDashboard\"> Dashboard Alert\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Search Box with Clear (\"x\") Button -->\r\n    <div style=\"position: relative; flex-shrink: 0;\">\r\n      <input type=\"text\" id=\"searchFilter\" placeholder=\"Search Client, Site, Hostname...\" \r\n             style=\"padding: 4px 30px 4px 8px; border-radius: 4px; border: 1px solid #ccc; width: 250px;\">\r\n      <span id=\"clearSearch\" style=\"position: absolute; right: 8px; top: 50%; transform: translateY(-50%);\r\n                                     cursor: pointer; font-weight: bold; display: none;\">&times;</span>\r\n    </div>\r\n\r\n    <!-- Reset Button -->\r\n    <div style=\"flex-shrink: 0;\">\r\n      <button id=\"resetDefaults\" style=\"padding: 4px 8px; margin-right: 5px;\">Reset</button>\r\n    </div>\r\n\r\n    <!-- Always Show Names Checkbox -->\r\n    <label style=\"margin: 0; flex-shrink: 0;\">\r\n      <input type=\"checkbox\" id=\"alwaysShowNames\"> Always show names\r\n    </label>\r\n\r\n    <!-- Auto Refresh Dropdown with Countdown Timer -->\r\n    <div style=\"flex-shrink: 0;\">\r\n      <label for=\"autoRefreshSelect\" style=\"margin-right: 5px;\">Auto Refresh:</label>\r\n      <select id=\"autoRefreshSelect\" style=\"padding: 3px 6px;\">\r\n        <option value=\"0\" selected>Manual</option>\r\n        <option value=\"0.25\">15 sec</option>\r\n        <option value=\"1\">1min</option>\r\n        <option value=\"2\">2min</option>\r\n        <option value=\"3\">3min</option>\r\n        <option value=\"4\">4min</option>\r\n        <option value=\"5\">5min</option>\r\n      </select>\r\n      <span id=\"countdownTimer\" style=\"margin-left: 10px; font-size: 0.9em; color: #333;\"></span>\r\n    </div>\r\n\r\n    <!-- Current Time: The raw timestamp is stored in a data attribute for JavaScript conversion -->\r\n    <div style=\"font-size: 0.9em; color: #333; flex-shrink: 0;\">\r\n      <strong>Current Time:</strong><br>\r\n      <span id=\"current-time\" data-timestamp=\"{{ datetime.datetime.now().timestamp() }}\">\r\n        <!-- Will be updated by JavaScript -->\r\n      </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- The rest of the page content is wrapped in a container with top margin -->\r\n<div style=\"margin-top: 55px;\">\r\n  <!-- Grouped Summary for Clients & Sites -->\r\n  <div class=\"client-container\" style=\"display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 20px;\">\r\n    {% for client, clientAgents in data_sources.allAgent | sort(attribute='site__client__name') | groupby(\"site__client__name\") %}\r\n    <div class=\"client-summary\" style=\"display: inline-flex; flex-direction: column; align-items: flex-start; border: 2px solid #3498db;\r\n                                       padding: 2px; border-radius: 8px; background-color: #ecf0f1; \r\n                                       box-shadow: 0 4px 8px rgba(52,152,219,0.3);\">\r\n      <!-- Client name (hidden by default) -->\r\n      <div class=\"client-name\" style=\"display: none; position: relative; top: -12px; left: 8px; padding: 2px 6px; \r\n                                      background-color: rgba(52, 152, 219, 0.9); color: #fff; border-radius: 5px;\r\n                                      font-weight: bold; font-size: 0.9em; box-shadow: 0 0 8px rgba(52,152,219,0.8); z-index: 10;\">\r\n        {{ client }}\r\n      </div>\r\n      <!-- Site container -->\r\n      <div class=\"site-container\" style=\"display: flex; flex-wrap: wrap; gap: 5px;\">\r\n        {% for site, siteAgents in clientAgents | sort(attribute='site__name') | groupby(\"site__name\") %}\r\n        <div class=\"site-summary\" style=\"display: inline-flex; flex-direction: column; align-items: flex-start; \r\n                                         border: 1px solid #2ecc71; padding: 2px; border-radius: 8px;\r\n                                         background-color: #e9f7ef; box-shadow: 0 2px 4px rgba(46,204,113,0.3);\">\r\n          <!-- Site name (hidden by default) -->\r\n          <div class=\"site-name\" style=\"display: none; position: relative; top: -10px; left: 6px; padding: 1px 4px; \r\n                                        background-color: rgba(46, 204, 113, 0.9); color: #fff; border-radius: 5px;\r\n                                        font-weight: normal; font-size: 0.85em; box-shadow: 0 0 6px rgba(46,204,113,0.7); z-index: 9;\">\r\n            {{ site }}\r\n          </div>\r\n          <!-- Agents -->\r\n          <div class=\"agent-grid\" style=\"display: inline-flex; flex-direction: row; gap: 3px;\">\r\n            {% for agent in siteAgents %}\r\n            <div class=\"agent-square\"\r\n                 data-id=\"{{ agent.id }}\"\r\n                 data-last-seen=\"{% if agent.last_seen %}{{ agent.last_seen.timestamp() }}{% else %}0{% endif %}\"\r\n                 data-offline-time=\"{{ agent.offline_time }}\"\r\n                 data-overdue-text-alert=\"{{ agent.overdue_text_alert }}\"\r\n                 data-overdue-email-alert=\"{{ agent.overdue_email_alert }}\"\r\n                 data-overdue-dashboard-alert=\"{{ agent.overdue_dashboard_alert }}\"\r\n                 data-client=\"{{ agent.site__client__name }}\"\r\n                 data-site=\"{{ agent.site__name }}\"\r\n                 data-hostname=\"{{ agent.hostname }}\"\r\n                 data-operating-system=\"{{ agent.operating_system }}\"\r\n                 data-ram=\"{{ agent.total_ram }}\"\r\n                 data-check-interval=\"{% if agent.check_interval %}{{ agent.check_interval }}{% else %}N/A{% endif %}\"\r\n                 data-last-logged-in-user=\"{% if agent.logged_in_username == 'None' %}{{ agent.last_logged_in_user }}{% else %}{{ agent.logged_in_username }}{% endif %}\"\r\n                 data-maintenance=\"{{ agent.maintenance_mode|string|lower }}\"\r\n                 data-monitoring-type=\"{{ agent.monitoring_type }}\"\r\n                 data-needs-reboot=\"{{ agent.needs_reboot|string|lower }}\"\r\n                 style=\"width: 12px; height: 12px; border-radius: 5px; box-shadow: 0 0 5px rgba(0,0,0,0.3);\r\n                        background-color: grey; cursor: pointer;\">\r\n            </div>\r\n            {% endfor %}\r\n          </div>\r\n        </div>\r\n        {% endfor %}\r\n      </div>\r\n    </div>\r\n    {% endfor %}\r\n  </div>\r\n\r\n  <!-- Tooltip for agent info -->\r\n  <div id=\"agentTooltip\" style=\"position: absolute; display: none; background: #fff; border: 1px solid #ccc;\r\n                                 padding: 5px; border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.2); z-index: 1000;\">\r\n  </div>\r\n\r\n  <!-- Original Table -->\r\n  <div class=\"table-responsive\" style=\"overflow-x: auto;\">\r\n    <table id=\"agentTable\" class=\"table table-sm\" style=\"width: 100%; border-collapse: collapse; margin-top: 20px;\">\r\n      <!-- Table Header -->\r\n      <thead>\r\n        <tr style=\"background-color: #f2f2f2;\">\r\n          <th style=\"padding: 1px 1px; border: 1px solid #ddd; text-align: left;\">Status</th>\r\n          <th style=\"padding: 1px 1px; border: 1px solid #ddd; text-align: left;\">\r\n            <i class=\"material-icons\">smartphone</i>\r\n          </th>\r\n          <th style=\"padding: 1px 1px; border: 1px solid #ddd; text-align: left;\">\r\n            <i class=\"material-icons\">email</i>\r\n          </th>\r\n          <th style=\"padding: 1px 1px; border: 1px solid #ddd; text-align: left;\">\r\n            <i class=\"material-icons\">notifications</i>\r\n          </th>\r\n          <th style=\"padding: 1px 1px; border: 1px solid #ddd; text-align: left;\"></th>\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\"></th>\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\"></th>\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\">Client Name</th>\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\">Site Name</th>\r\n          <!-- Host Details Column -->\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\">Host</th>\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\">Operating System</th>\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\">Disks</th>\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\">Alert Template</th>\r\n          <th style=\"padding: 8px 12px; border: 1px solid #ddd; text-align: left;\">Policy</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <!-- Table Body -->\r\n      <tbody>\r\n        {% for agent in data_sources.allAgent\r\n                      | sort(attribute='hostname')\r\n                      | sort(attribute='site__name')\r\n                      | sort(attribute='site__client__name') %}\r\n        <tr data-id=\"{{ agent.id }}\"\r\n            data-last-seen=\"{% if agent.last_seen %}{{ agent.last_seen.timestamp() }}{% else %}0{% endif %}\"\r\n            data-offline-time=\"{{ agent.offline_time }}\"\r\n            style=\"background-color: {% if loop.index0 is even %}#f9f9f9{% else %}transparent{% endif %};\">\r\n          <td class=\"status\" style=\"padding: 8px 1px; border: 1px solid #ddd;\">Checking...</td>\r\n          <td style=\"padding: 1px 1px; border: 1px solid #ddd;\">\r\n            <input type=\"checkbox\" disabled {% if agent.overdue_text_alert|string|lower == \"true\" %}checked{% endif %}>\r\n          </td>\r\n          <td style=\"padding: 1px 1px; border: 1px solid #ddd;\">\r\n            <input type=\"checkbox\" disabled {% if agent.overdue_email_alert|string|lower == \"true\" %}checked{% endif %}>\r\n          </td>\r\n          <td style=\"padding: 1px 1px; border: 1px solid #ddd;\">\r\n            <input type=\"checkbox\" disabled {% if agent.overdue_dashboard_alert|string|lower == \"true\" %}checked{% endif %}>\r\n          </td>\r\n          <td style=\"padding: 1px 1px; border: 1px solid #ddd;\">\r\n            {% set plat = agent.plat|string|lower %}\r\n            {% if plat == \"windows\" %}\r\n              <i class=\"fab fa-windows\"></i>\r\n            {% elif plat == \"darwin\" %}\r\n              <i class=\"fab fa-apple\"></i>\r\n            {% elif plat == \"linux\" %}\r\n              <i class=\"fab fa-linux\"></i>\r\n            {% else %}\r\n              {{ agent.plat }}\r\n            {% endif %}\r\n          </td>\r\n          <td style=\"padding: 1px 1px; border: 1px solid #ddd;\">\r\n            {% set mtype = agent.monitoring_type|string|lower %}\r\n            {% if mtype == \"workstation\" %}\r\n              <i class=\"material-icons\">laptop</i>\r\n            {% elif mtype == \"server\" %}\r\n              <i class=\"material-icons\">dns</i>\r\n            {% else %}\r\n              {{ agent.monitoring_type }}\r\n            {% endif %}\r\n          </td>\r\n          <td style=\"padding: 1px 1px; border: 1px solid #ddd;\">\r\n            {% if agent.maintenance_mode|string|lower == \"true\" %}\r\n              <i class=\"material-icons\">handyman</i>\r\n            {% endif %}\r\n          </td>\r\n          <td style=\"padding: 8px 12px; border: 1px solid #ddd;\">{{ agent.site__client__name }}</td>\r\n          <td style=\"padding: 8px 12px; border: 1px solid #ddd;\">{{ agent.site__name }}</td>\r\n          <!-- Host Details Column includes Pub IP, Boot Time, Last Seen, and Last Patched -->\r\n          <td style=\"padding: 8px 12px; border: 1px solid #ddd;\">\r\n            {% if agent.needs_reboot|string|lower == \"true\" %}\r\n              <i class=\"material-icons\">power_settings_new</i>\r\n            {% endif %}\r\n            {{ agent.hostname }}<br>\r\n            <b>Desc:</b> {{ agent.description }}<br>\r\n            <b>RAM:</b> {{ agent.total_ram }}GB<br>\r\n            <b>User:</b>\r\n              {% if agent.logged_in_username == \"None\" %}\r\n                <i>{{ agent.last_logged_in_user }}</i>\r\n              {% else %}\r\n                {{ agent.logged_in_username }}\r\n              {% endif %}\r\n            <br>\r\n            <b>Pub IP:</b> {{ agent.public_ip }}<br>\r\n            <b>Boot Time:</b> <span class=\"boot-time\">{{ agent.boot_time }}</span><br>\r\n            <b>Last Seen:</b>\r\n            {% if agent.last_seen %}\r\n              <span class=\"last-seen\" data-last-seen=\"{{ agent.last_seen.timestamp() }}\"></span>\r\n            {% else %}\r\n              N/A\r\n            {% endif %}\r\n            <br>\r\n            <b>Last Patched:</b>\r\n            {% if agent.patches_last_installed %}\r\n              <span class=\"last-patched\" data-last-patched=\"{{ agent.patches_last_installed.timestamp() }}\"></span>\r\n            {% else %}\r\n              N/A\r\n            {% endif %}\r\n            <br>\r\n            <b>Offline:</b> {{ agent.offline_time }} | <b>Overdue:</b> {{ agent.overdue_time }} | <b>Check Int:</b> {{ agent.check_interval }}\r\n            {% if agent.block_policy_inheritance|string|lower == \"true\" %}\r\n              <span style=\"color: orange; font-weight: bold;\">Policy Inheritance Blocked</span>\r\n            {% endif %}\r\n            <br>\r\n            <b>TRMM Ver:</b> {{ agent.version }}\r\n          </td>\r\n          <td style=\"padding: 8px 12px; border: 1px solid #ddd;\">{{ agent.operating_system }}</td>\r\n          <td style=\"padding: 8px 12px; border: 1px solid #ddd;\">\r\n            {% if agent.disks %}\r\n              {% for disk in agent.disks %}\r\n                <div style=\"margin-bottom: 8px;\">\r\n                  <!-- Disk Header: Device and Total Capacity -->\r\n                  <div style=\"font-size: 0.9em; margin-bottom: 2px;\">\r\n                    Device: {{ disk.device }} - Total: {{ disk.total }}\r\n                  </div>\r\n                  <!-- Progress Bar: Represents Percentage Used -->\r\n                  <div style=\"position: relative; width: 100%; background-color: #e0e0e0; height: 10px; border-radius: 5px;\">\r\n                    <div style=\"width: {{ disk.percent }}%; height: 100%; border-radius: 5px; background-color: \r\n                      {% if disk.percent|float >= 80 %}\r\n                        #ff4d4d\r\n                      {% elif disk.percent|float >= 60 %}\r\n                        #ffa500\r\n                      {% else %}\r\n                        #4CAF50\r\n                      {% endif %}\r\n                    ;\"></div>\r\n                  </div>\r\n                  <!-- Disk Details: Used and Free space with the Percentage -->\r\n                  <div style=\"font-size: 0.8em; margin-top: 2px;\">\r\n                    Used: {{ disk.used }} ({{ disk.percent }}%) - Free: {{ disk.free }}\r\n                  </div>\r\n                </div>\r\n              {% endfor %}\r\n            {% else %}\r\n              N/A\r\n            {% endif %}\r\n          </td>\r\n          <td style=\"padding: 8px 12px; border: 1px solid #ddd;\">{{ agent.alert_template }}</td>\r\n          <td style=\"padding: 8px 12px; border: 1px solid #ddd;\">{{ agent.policy }}</td>\r\n        </tr>\r\n        {% endfor %}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n</div> <!-- End of margin-top container -->\r\n\r\n<script>\r\n  /* -------------------------------------------\r\n     Updated JavaScript to persist checkbox and search states,\r\n     ensure \"Always Show Names\" is applied on refresh,\r\n     add a countdown timer for auto refresh (with a new 15 sec option),\r\n     add a clear (\"x\") button to the search bar,\r\n     a reset button to load default values,\r\n     clear the search field when checkboxes change,\r\n     and update all formatted date areas using the user’s local timezone.\r\n  ------------------------------------------- */\r\n  const ALERT_ALL_DEFAULT         = 0;\r\n  const ALERT_TEXT_DEFAULT        = 0;\r\n  const ALERT_EMAIL_DEFAULT       = 0;\r\n  const ALERT_DASHBOARD_DEFAULT   = 0;\r\n  const ALWAYS_SHOW_NAMES_DEFAULT = 0;\r\n\r\n  let autoRefreshTimer = null;\r\n  let countdownInterval = null;\r\n  let nextRefreshTime   = null;\r\n\r\n  // Start auto-refresh timer and countdown based on a given minutes value (fractional minutes allowed)\r\n  function startAutoRefresh(minutes) {\r\n    if (autoRefreshTimer) {\r\n      clearInterval(autoRefreshTimer);\r\n      autoRefreshTimer = null;\r\n    }\r\n    if (countdownInterval) {\r\n      clearInterval(countdownInterval);\r\n      countdownInterval = null;\r\n    }\r\n    if (minutes > 0) {\r\n      const intervalMs = minutes * 60 * 1000;\r\n      nextRefreshTime = Date.now() + intervalMs;\r\n      autoRefreshTimer = setInterval(() => { location.reload(); }, intervalMs);\r\n      updateCountdown();\r\n      countdownInterval = setInterval(updateCountdown, 1000);\r\n    } else {\r\n      document.getElementById(\"countdownTimer\").innerText = \"\";\r\n    }\r\n  }\r\n\r\n  // Update countdown timer display\r\n  function updateCountdown() {\r\n    if (!nextRefreshTime) return;\r\n    const remaining = nextRefreshTime - Date.now();\r\n    if (remaining <= 0) {\r\n      document.getElementById(\"countdownTimer\").innerText = \"Refreshing...\";\r\n    } else {\r\n      const seconds = Math.ceil(remaining / 1000);\r\n      document.getElementById(\"countdownTimer\").innerText = \"Refresh in: \" + seconds + \" sec\";\r\n    }\r\n  }\r\n\r\n  document.addEventListener(\"DOMContentLoaded\", function() {\r\n    const alertAll           = document.getElementById(\"alertAll\");\r\n    const alertText          = document.getElementById(\"alertText\");\r\n    const alertEmail         = document.getElementById(\"alertEmail\");\r\n    const alertDashboard     = document.getElementById(\"alertDashboard\");\r\n    const alwaysShowNamesChk = document.getElementById(\"alwaysShowNames\");\r\n    const autoRefreshSelect  = document.getElementById(\"autoRefreshSelect\");\r\n    const searchFilterInput  = document.getElementById(\"searchFilter\");\r\n    const clearSearch        = document.getElementById(\"clearSearch\");\r\n    const resetDefaultsBtn   = document.getElementById(\"resetDefaults\");\r\n    const tooltip            = document.getElementById(\"agentTooltip\");\r\n\r\n    // 1) Initialize checkboxes from localStorage if available, otherwise use defaults\r\n    const savedAlertAll = localStorage.getItem(\"alertAll\");\r\n    alertAll.checked = savedAlertAll !== null ? (savedAlertAll === \"1\") : (ALERT_ALL_DEFAULT === 1);\r\n\r\n    const savedAlertText = localStorage.getItem(\"alertText\");\r\n    alertText.checked = savedAlertText !== null ? (savedAlertText === \"1\") : (ALERT_TEXT_DEFAULT === 1);\r\n\r\n    const savedAlertEmail = localStorage.getItem(\"alertEmail\");\r\n    alertEmail.checked = savedAlertEmail !== null ? (savedAlertEmail === \"1\") : (ALERT_EMAIL_DEFAULT === 1);\r\n\r\n    const savedAlertDashboard = localStorage.getItem(\"alertDashboard\");\r\n    alertDashboard.checked = savedAlertDashboard !== null ? (savedAlertDashboard === \"1\") : (ALERT_DASHBOARD_DEFAULT === 1);\r\n\r\n    const savedAlwaysShowNames = localStorage.getItem(\"alwaysShowNames\");\r\n    alwaysShowNamesChk.checked = savedAlwaysShowNames !== null ? (savedAlwaysShowNames === \"1\") : (ALWAYS_SHOW_NAMES_DEFAULT === 1);\r\n\r\n    // 2) Initialize search input from localStorage if available\r\n    const savedSearchFilter = localStorage.getItem(\"searchFilter\");\r\n    if (savedSearchFilter !== null) {\r\n      searchFilterInput.value = savedSearchFilter;\r\n    }\r\n\r\n    // 3) Restore autoRefresh setting and start timer/countdown\r\n    const savedRefresh = localStorage.getItem(\"autoRefreshMinutes\");\r\n    if (savedRefresh !== null) {\r\n      autoRefreshSelect.value = savedRefresh;\r\n      startAutoRefresh(parseFloat(savedRefresh));\r\n    }\r\n\r\n    // Search event listener: if any alert checkbox is enabled, only further filter already visible items.\r\n    searchFilterInput.addEventListener('input', () => {\r\n      localStorage.setItem(\"searchFilter\", searchFilterInput.value);\r\n      const searchTerm = searchFilterInput.value.trim().toLowerCase();\r\n      clearSearch.style.display = searchTerm === \"\" ? \"none\" : \"block\";\r\n\r\n      if (alertText.checked || alertEmail.checked || alertDashboard.checked) {\r\n        // If alert filters are active, only modify agent squares that are already visible.\r\n        document.querySelectorAll(\".agent-square\").forEach(sq => {\r\n          if (sq.style.display !== \"none\") {\r\n            const matches = [\r\n              sq.dataset.client,\r\n              sq.dataset.site,\r\n              sq.dataset.hostname,\r\n              sq.dataset.operatingSystem,\r\n              sq.dataset.lastLoggedInUser\r\n            ].some(text => text && text.toLowerCase().includes(searchTerm));\r\n            if (searchTerm === \"\" || matches) {\r\n              // leave it visible\r\n              sq.style.display = \"inline-block\";\r\n            } else {\r\n              sq.style.display = \"none\";\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        // No alert filters active, so search over all squares.\r\n        document.querySelectorAll(\".agent-square\").forEach(sq => {\r\n          const matches = [\r\n            sq.dataset.client,\r\n            sq.dataset.site,\r\n            sq.dataset.hostname,\r\n            sq.dataset.operatingSystem,\r\n            sq.dataset.lastLoggedInUser\r\n          ].some(text => text && text.toLowerCase().includes(searchTerm));\r\n          sq.style.display = (searchTerm === \"\" || matches) ? \"inline-block\" : \"none\";\r\n        });\r\n      }\r\n      updateSiteClientVisibility();\r\n      filterTableRows();\r\n    });\r\n\r\n    // Clear search when clicking the \"x\"\r\n    clearSearch.addEventListener('click', () => {\r\n      searchFilterInput.value = \"\";\r\n      clearSearch.style.display = \"none\";\r\n      searchFilterInput.dispatchEvent(new Event('input'));\r\n    });\r\n\r\n    // Reset button: reload default values\r\n    resetDefaultsBtn.addEventListener(\"click\", () => {\r\n      localStorage.setItem(\"alertAll\", ALERT_ALL_DEFAULT ? \"1\" : \"0\");\r\n      localStorage.setItem(\"alertText\", ALERT_TEXT_DEFAULT ? \"1\" : \"0\");\r\n      localStorage.setItem(\"alertEmail\", ALERT_EMAIL_DEFAULT ? \"1\" : \"0\");\r\n      localStorage.setItem(\"alertDashboard\", ALERT_DASHBOARD_DEFAULT ? \"1\" : \"0\");\r\n      localStorage.setItem(\"alwaysShowNames\", ALWAYS_SHOW_NAMES_DEFAULT ? \"1\" : \"0\");\r\n      localStorage.setItem(\"searchFilter\", \"\");\r\n      localStorage.setItem(\"autoRefreshMinutes\", \"0\");\r\n\r\n      alertAll.checked = (ALERT_ALL_DEFAULT === 1);\r\n      alertText.checked = (ALERT_TEXT_DEFAULT === 1);\r\n      alertEmail.checked = (ALERT_EMAIL_DEFAULT === 1);\r\n      alertDashboard.checked = (ALERT_DASHBOARD_DEFAULT === 1);\r\n      alwaysShowNamesChk.checked = (ALWAYS_SHOW_NAMES_DEFAULT === 1);\r\n      searchFilterInput.value = \"\";\r\n      autoRefreshSelect.value = \"0\";\r\n      startAutoRefresh(0);\r\n      updateSiteClientVisibility();\r\n      filterSquares();\r\n      searchFilterInput.dispatchEvent(new Event('input'));\r\n    });\r\n\r\n    // Alerts dropdown\r\n    const dropdownBtn  = document.getElementById(\"alertDropdownBtn\");\r\n    const dropdownMenu = document.getElementById(\"alertDropdownMenu\");\r\n    dropdownBtn.addEventListener(\"click\", () => {\r\n      dropdownMenu.style.display = (dropdownMenu.style.display === \"block\") ? \"none\" : \"block\";\r\n    });\r\n    window.addEventListener(\"click\", (e) => {\r\n      if (!dropdownBtn.contains(e.target) && !dropdownMenu.contains(e.target)) {\r\n        dropdownMenu.style.display = \"none\";\r\n      }\r\n    });\r\n\r\n    // \"All\" toggles other checkboxes and saves state; also clear search\r\n    alertAll.addEventListener(\"change\", function() {\r\n      const checked = this.checked;\r\n      alertText.checked = alertEmail.checked = alertDashboard.checked = checked;\r\n      localStorage.setItem(\"alertAll\", checked ? \"1\" : \"0\");\r\n      localStorage.setItem(\"alertText\", checked ? \"1\" : \"0\");\r\n      localStorage.setItem(\"alertEmail\", checked ? \"1\" : \"0\");\r\n      localStorage.setItem(\"alertDashboard\", checked ? \"1\" : \"0\");\r\n\r\n      // Clear search when checkboxes change\r\n      searchFilterInput.value = \"\";\r\n      clearSearch.style.display = \"none\";\r\n      searchFilterInput.dispatchEvent(new Event('input'));\r\n\r\n      filterSquares();\r\n    });\r\n\r\n    [alertText, alertEmail, alertDashboard].forEach(chk => {\r\n      chk.addEventListener(\"change\", function() {\r\n        localStorage.setItem(this.id, this.checked ? \"1\" : \"0\");\r\n        if (alertText.checked && alertEmail.checked && alertDashboard.checked) {\r\n          alertAll.checked = true;\r\n          localStorage.setItem(\"alertAll\", \"1\");\r\n        } else {\r\n          alertAll.checked = false;\r\n          localStorage.setItem(\"alertAll\", \"0\");\r\n        }\r\n\r\n        // Clear search when checkboxes change\r\n        searchFilterInput.value = \"\";\r\n        clearSearch.style.display = \"none\";\r\n        searchFilterInput.dispatchEvent(new Event('input'));\r\n\r\n        filterSquares();\r\n      });\r\n    });\r\n\r\n    // Save alwaysShowNames setting on change; also clear search\r\n    alwaysShowNamesChk.addEventListener(\"change\", function() {\r\n      localStorage.setItem(\"alwaysShowNames\", this.checked ? \"1\" : \"0\");\r\n\r\n      // Clear search when checkboxes change\r\n      searchFilterInput.value = \"\";\r\n      clearSearch.style.display = \"none\";\r\n      searchFilterInput.dispatchEvent(new Event('input'));\r\n\r\n      filterSquares();\r\n    });\r\n\r\n    // autoRefreshSelect: Save the setting and start/clear timer on change\r\n    autoRefreshSelect.addEventListener(\"change\", () => {\r\n      localStorage.setItem(\"autoRefreshMinutes\", autoRefreshSelect.value);\r\n      startAutoRefresh(parseFloat(autoRefreshSelect.value));\r\n    });\r\n\r\n    function updateSiteClientVisibility() {\r\n      document.querySelectorAll(\".site-summary\").forEach(site => {\r\n        const visibleAgents = Array.from(site.querySelectorAll('.agent-square')).some(sq => sq.style.display !== \"none\");\r\n        site.style.display = visibleAgents ? \"inline-flex\" : \"none\";\r\n      });\r\n      document.querySelectorAll(\".client-summary\").forEach(client => {\r\n        const visibleSites = Array.from(client.querySelectorAll('.site-summary')).some(site => site.style.display !== \"none\");\r\n        client.style.display = visibleSites ? \"inline-flex\" : \"none\";\r\n      });\r\n    }\r\n\r\n    // Tooltip for agent info\r\n    document.querySelectorAll(\".agent-square\").forEach(sq => {\r\n      sq.addEventListener(\"mouseenter\", () => {\r\n        const client        = sq.dataset.client || \"\";\r\n        const site          = sq.dataset.site || \"\";\r\n        const hostname      = sq.dataset.hostname || \"\";\r\n        const os            = sq.dataset.operatingSystem || \"\";\r\n        const ram           = sq.dataset.ram || \"\";\r\n        const lastPatched   = sq.dataset.lastPatched || \"\";\r\n        const checkInterval = sq.dataset.checkInterval || \"\";\r\n        const lastUser      = sq.dataset.lastLoggedInUser || \"\";\r\n        const needsReboot   = (sq.dataset.needsReboot === \"true\") ? \"Yes\" : \"No\";\r\n        const maintenance   = (sq.dataset.maintenance === \"true\") ? \"Yes\" : \"No\";\r\n\r\n        tooltip.innerHTML = `\r\n          <div style=\"min-width: 220px;\">\r\n            <div style=\"font-weight: bold; font-size: 1.05em; margin-bottom: 5px;\">\r\n              ${client} - ${site}\r\n            </div>\r\n            <table style=\"border-collapse: collapse; width: 100%; font-size: 0.9em;\">\r\n              <tr>\r\n                <td style=\"font-weight: bold; padding: 2px;\">Host:</td>\r\n                <td style=\"padding: 2px;\">${hostname}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-weight: bold; padding: 2px;\">OS:</td>\r\n                <td style=\"padding: 2px;\">${os}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-weight: bold; padding: 2px;\">RAM (GB):</td>\r\n                <td style=\"padding: 2px;\">${ram}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-weight: bold; padding: 2px;\">Last User:</td>\r\n                <td style=\"padding: 2px;\">${lastUser}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-weight: bold; padding: 2px;\">Last Patched:</td>\r\n                <td style=\"padding: 2px;\">${lastPatched}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-weight: bold; padding: 2px;\">Check Interval:</td>\r\n                <td style=\"padding: 2px;\">${checkInterval}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-weight: bold; padding: 2px;\">Needs Reboot:</td>\r\n                <td style=\"padding: 2px;\">${needsReboot}</td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-weight: bold; padding: 2px;\">Maintenance:</td>\r\n                <td style=\"padding: 2px;\">${maintenance}</td>\r\n              </tr>\r\n            </table>\r\n          </div>\r\n        `;\r\n        tooltip.style.display = \"block\";\r\n      });\r\n\r\n      sq.addEventListener(\"mousemove\", (e) => {\r\n        const tooltipWidth  = tooltip.offsetWidth;\r\n        const tooltipHeight = tooltip.offsetHeight;\r\n        let newLeft         = e.pageX + 10;\r\n        let newTop          = e.pageY + 10;\r\n        if (newLeft + tooltipWidth > window.innerWidth + window.scrollX) {\r\n          newLeft = e.pageX - tooltipWidth - 10;\r\n        }\r\n        if (newTop + tooltipHeight > window.innerHeight + window.scrollY) {\r\n          newTop = e.pageY - tooltipHeight - 10;\r\n        }\r\n        tooltip.style.left = newLeft + \"px\";\r\n        tooltip.style.top  = newTop + \"px\";\r\n      });\r\n\r\n      sq.addEventListener(\"mouseleave\", () => {\r\n        tooltip.style.display = \"none\";\r\n      });\r\n    });\r\n\r\n    // Update status for both table rows and squares\r\n    function updateStatus() {\r\n      const now = new Date(); // Use client time\r\n      document.querySelectorAll(\"#agentTable tbody tr\").forEach(row => {\r\n        const offlineTime  = parseInt(row.dataset.offlineTime, 10);\r\n        // Parse last seen as Unix timestamp then multiply by 1000 for JS Date\r\n        const lastSeenTimestamp = parseFloat(row.dataset.lastSeen);\r\n        const lastSeenDate = new Date(lastSeenTimestamp * 1000);\r\n        const statusCell   = row.querySelector(\".status\");\r\n        if (isNaN(lastSeenDate.getTime()) || isNaN(offlineTime)) {\r\n          statusCell.textContent = \"Error\";\r\n          statusCell.style.color = \"orange\";\r\n          return;\r\n        }\r\n        const diffMinutes = Math.round((now - lastSeenDate) / 60000);\r\n        if (diffMinutes <= offlineTime) {\r\n          statusCell.textContent = \"✅ Online\";\r\n          statusCell.style.color = \"green\";\r\n        } else {\r\n          statusCell.textContent = \"❌ Offline\";\r\n          statusCell.style.color = \"red\";\r\n        }\r\n      });\r\n      document.querySelectorAll(\".agent-square\").forEach(sq => {\r\n        const offlineTime  = parseInt(sq.dataset.offlineTime, 10);\r\n        const lastSeenTimestamp = parseFloat(sq.dataset.lastSeen);\r\n        const lastSeenDate = new Date(lastSeenTimestamp * 1000);\r\n        if (isNaN(lastSeenDate.getTime()) || isNaN(offlineTime)) {\r\n          sq.style.backgroundColor = \"orange\";\r\n          sq.dataset.status = \"error\";\r\n          return;\r\n        }\r\n        const diffMinutes = Math.round((now - lastSeenDate) / 60000);\r\n        if (diffMinutes <= offlineTime) {\r\n          sq.style.backgroundColor = \"green\";\r\n          sq.dataset.status = \"online\";\r\n        } else {\r\n          sq.style.backgroundColor = \"red\";\r\n          sq.dataset.status = \"offline\";\r\n        }\r\n      });\r\n      filterTableRows();\r\n    }\r\n\r\n    function filterSquares() {\r\n      const filterText      = alertText.checked;\r\n      const filterEmail     = alertEmail.checked;\r\n      const filterDashboard = alertDashboard.checked;\r\n      const anyFilter       = filterText || filterEmail || filterDashboard;\r\n      document.querySelectorAll(\".agent-square\").forEach(sq => {\r\n        if (!anyFilter) {\r\n          sq.style.display = \"inline-block\";\r\n          return;\r\n        }\r\n        if (sq.dataset.status !== \"offline\") {\r\n          sq.style.display = \"none\";\r\n          return;\r\n        }\r\n        let show = false;\r\n        if (filterText && sq.dataset.overdueTextAlert.toLowerCase() === \"true\") show = true;\r\n        if (filterEmail && sq.dataset.overdueEmailAlert.toLowerCase() === \"true\") show = true;\r\n        if (filterDashboard && sq.dataset.overdueDashboardAlert.toLowerCase() === \"true\") show = true;\r\n        sq.style.display = show ? \"inline-block\" : \"none\";\r\n      });\r\n      if (anyFilter) {\r\n        document.querySelectorAll(\".client-summary\").forEach(client => {\r\n          const siteSummaries = client.querySelectorAll(\".site-summary\");\r\n          let clientHasVisible = false;\r\n          siteSummaries.forEach(site => {\r\n            const agentSquares  = site.querySelectorAll(\".agent-square\");\r\n            const visibleAgents = Array.from(agentSquares).some(sq => sq.style.display !== \"none\");\r\n            if (visibleAgents) {\r\n              site.style.display = \"\";\r\n              site.querySelector(\".site-name\").style.display = \"block\";\r\n              clientHasVisible   = true;\r\n            } else {\r\n              site.style.display = \"none\";\r\n            }\r\n          });\r\n          if (clientHasVisible) {\r\n            client.style.display = \"\";\r\n            client.querySelector(\".client-name\").style.display = \"block\";\r\n          } else {\r\n            client.style.display = \"none\";\r\n          }\r\n        });\r\n      } else {\r\n        document.querySelectorAll(\".site-summary\").forEach(site => {\r\n          site.style.display = \"\";\r\n          site.querySelector(\".site-name\").style.display = \"none\";\r\n        });\r\n        document.querySelectorAll(\".client-summary\").forEach(client => {\r\n          client.style.display = \"\";\r\n          client.querySelector(\".client-name\").style.display = \"none\";\r\n        });\r\n      }\r\n      if (alwaysShowNamesChk.checked) {\r\n        document.querySelectorAll(\".client-name\").forEach(el => el.style.display = \"block\");\r\n        document.querySelectorAll(\".site-name\").forEach(el => el.style.display = \"block\");\r\n      }\r\n      filterTableRows();\r\n    }\r\n\r\n    function filterTableRows() {\r\n      document.querySelectorAll(\"#agentTable tbody tr\").forEach(row => {\r\n        const agentId = row.getAttribute(\"data-id\");\r\n        const square  = document.querySelector(`.agent-square[data-id=\"${agentId}\"]`);\r\n        row.style.display = (square && square.style.display === \"none\") ? \"none\" : \"\";\r\n      });\r\n    }\r\n\r\n    // Initial calls: update status and filtering; then reapply search filtering if needed.\r\n    updateSiteClientVisibility();\r\n    updateStatus();\r\n    filterSquares();\r\n    if (searchFilterInput.value.trim() !== \"\") {\r\n      searchFilterInput.dispatchEvent(new Event('input'));\r\n    }\r\n\r\n    // ---- New Functions for Local Timezone Date Formatting ----\r\n    function updateBootTime() {\r\n      var userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n      var now = new Date();\r\n      var thirtyDaysMs = 30 * 24 * 60 * 60 * 1000; // 30 days in ms\r\n      var sixtyDaysMs  = 60 * 24 * 60 * 60 * 1000; // 60 days in ms\r\n\r\n      document.querySelectorAll('.boot-time').forEach(function(cell) {\r\n        var ts = parseFloat(cell.textContent.trim());\r\n        if (!isNaN(ts)) {\r\n          // Convert boot time from Unix timestamp (seconds) to a Date object.\r\n          var bootDate = new Date(ts * 1000);\r\n          var formattedBoot = bootDate.toLocaleString(undefined, { \r\n            timeZone: userTimeZone,\r\n            timeZoneName: 'short'\r\n          });\r\n          \r\n          // Locate the parent row to get the \"last seen\" date.\r\n          var row = cell.closest('tr');\r\n          var lastSeenTimestamp = row ? parseFloat(row.getAttribute('data-last-seen')) : null;\r\n          var lastSeenDate = lastSeenTimestamp ? new Date(lastSeenTimestamp * 1000) : null;\r\n          \r\n          // If \"last seen\" is older than 30 days and boot time is older than 60 days, display boot time in brackets and italicized.\r\n          if (lastSeenDate && (now - lastSeenDate > thirtyDaysMs) && (now - bootDate > sixtyDaysMs)) {\r\n            cell.innerHTML = \"<i>(\" + formattedBoot + \")</i>\";\r\n          } else {\r\n            cell.textContent = formattedBoot;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    function updateCurrentTime() {\r\n      var userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n      var currentTimeElem = document.getElementById('current-time');\r\n      if (currentTimeElem) {\r\n        var ts = parseFloat(currentTimeElem.getAttribute('data-timestamp'));\r\n        if (isNaN(ts)) {\r\n          ts = Date.now() / 1000;\r\n        }\r\n        var date = new Date(ts * 1000);\r\n        currentTimeElem.textContent = date.toLocaleString(undefined, { \r\n          timeZone: userTimeZone,\r\n          timeZoneName: 'short'\r\n        });\r\n      }\r\n    }\r\n\r\n    function updateLastSeen() {\r\n      var userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n      var now = new Date();\r\n      document.querySelectorAll('.last-seen').forEach(function(span) {\r\n        var ts = parseFloat(span.getAttribute('data-last-seen'));\r\n        if (!isNaN(ts) && ts > 0) {\r\n          var lastSeenDate = new Date(ts * 1000);\r\n          var formatted = lastSeenDate.toLocaleString(undefined, { \r\n            timeZone: userTimeZone,\r\n            timeZoneName: 'short'\r\n          });\r\n          // Calculate diff minutes\r\n          var diffMinutes = Math.round((now - lastSeenDate) / 60000);\r\n          span.textContent = formatted + \" (\" + diffMinutes + \" mins ago)\";\r\n        } else {\r\n          span.textContent = \"N/A\";\r\n        }\r\n      });\r\n    }\r\n\r\n    function updateLastPatched() {\r\n      var userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n      var now = new Date();\r\n      var thirtyDaysMs = 30 * 24 * 60 * 60 * 1000;\r\n      document.querySelectorAll('.last-patched').forEach(function(span) {\r\n        var ts = parseFloat(span.getAttribute('data-last-patched'));\r\n        if (!isNaN(ts) && ts > 0) {\r\n          var date = new Date(ts * 1000);\r\n          var formatted = date.toLocaleString(undefined, { \r\n            timeZone: userTimeZone,\r\n            timeZoneName: 'short'\r\n          });\r\n          if (now - date > thirtyDaysMs) {\r\n            span.innerHTML = '<span style=\"color: red;\">' + formatted + '</span>';\r\n          } else {\r\n            span.innerHTML = '<span style=\"color: green;\">' + formatted + '</span>';\r\n          }\r\n        } else {\r\n          span.textContent = \"N/A\";\r\n        }\r\n      });\r\n    }\r\n\r\n    // Call the new functions to update Boot Time, Current Time, Last Seen, and Last Patched\r\n    updateBootTime();\r\n    updateCurrentTime();\r\n    updateLastSeen();\r\n    updateLastPatched();\r\n\r\n  });\r\n</script>\r\n\r\n{% endblock %}",
    "type": "html",
    "depends_on": [],
    "template_variables": "data_sources:\n  allAgent:\n    limit: 2000\n    model: agent    \n    defer:\n    - services\n    - wmi_detail\n    only:\n    - id\n    - created_by\n    - created_time\n    - modified_by\n    - modified_time\n    - version\n    - operating_system\n    - plat\n    - goarch\n    - hostname\n    - agent_id\n    - last_seen\n    - public_ip\n    - total_ram\n    - disks\n    - boot_time\n    - logged_in_username\n    - last_logged_in_user\n    - monitoring_type\n    - description\n    - mesh_node_id\n    - overdue_email_alert\n    - overdue_text_alert\n    - overdue_dashboard_alert\n    - offline_time\n    - overdue_time\n    - check_interval\n    - needs_reboot\n    - choco_installed\n    - patches_last_installed\n    - time_zone\n    - maintenance_mode\n    - block_policy_inheritance\n    - alert_template\n    - site\n    - policy\n    - site__name\n    - site__client__name"
  },
  "assets": []
}