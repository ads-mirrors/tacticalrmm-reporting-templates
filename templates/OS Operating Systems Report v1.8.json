{
  "base_template": {
    "name": "TRMM_Base v1.1",
    "html": "<html>\n\n<head>\n    <style>\n        /* —— PDF page settings —— */\n        @page {\n            margin: 0.5in;\n            size: letter portrait;\n        }\n\n        /* —— Color palette (theme) —— */\n        :root {\n            --header-bg: #2c3e50;\n            --header-text: #ffffff;\n            --border-color: #dddddd;\n            --table-header-bg: #f2f2f2;\n            --status-ready-bg: #eaf7ec;\n            --status-ready-badge: #28a745;\n            --status-not-ready-bg: #fbebee;\n            --status-not-ready-badge: #dc3545;\n            --status-unknown-bg: #fff9e6;\n            --status-unknown-badge: #ffc107;\n            --badge-already-bg: #17a2b8;\n        }\n\n        /* —— Typography & utilities (structure) —— */\n        body {\n            font-family: sans-serif;\n            color: #333;\n            font-size: 12px;\n        }\n\n        .section {\n            margin-top: 20px;\n        }\n\n        .text-danger {\n            color: #a94442;\n            font-weight: bold;\n        }\n\n        /* —— Header layout (structure) —— */\n        .report-header {\n            background-color: var(--header-bg);\n            color: var(--header-text);\n            padding: 20px;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n        }\n\n        .header-logo {\n            width: 80px;\n            margin-right: 25px;\n            flex-shrink: 0;\n        }\n\n        .header-date {\n            margin-left: auto;\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .report-header h1 {\n            font-size: 24px;\n            margin: 0 0 5px;\n        }\n\n        .report-header h2 {\n            font-size: 16px;\n            margin: 0;\n            opacity: 0.9;\n        }\n\n        /* —— Standardized Table Styles (structure) —— */\n        .report-table {\n            border-collapse: collapse;\n            width: 100%;\n        }\n\n        .report-table th,\n        .report-table td {\n            border: 1px solid var(--border-color);\n            padding: 6px 8px;\n            text-align: left;\n            vertical-align: top;\n        }\n\n        .report-table thead th {\n            background-color: var(--table-header-bg);\n            font-weight: bold;\n            cursor: pointer;\n            user-select: none;\n        }\n\n        /* Header label + sort indicators */\n        .th-topline {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            gap: .4rem;\n        }\n\n        .th-label {\n            position: relative;\n            cursor: pointer;\n            user-select: none;\n        }\n\n        /* These are the specific rules that make the indicator visible */\n        th.sorted.asc .th-label::after {\n            content: \"▲\";\n            padding-left: .4rem;\n            color: #333;\n            font-size: .9em;\n        }\n\n        th.sorted.desc .th-label::after {\n            content: \"▼\";\n            padding-left: .4rem;\n            color: #333;\n            font-size: .9em;\n        }\n\n        .report-table thead th select {\n            width: 100%;\n            margin-top: 5px;\n            padding: 4px;\n            border-radius: 4px;\n            border: 1px solid #ccc;\n            font-weight: normal;\n            background: #fff;\n        }\n\n        /* —— Badge shape (structure) —— */\n        .status-badge {\n            display: inline-block;\n            padding: 4px 10px;\n            border-radius: 12px;\n            color: #fff;\n            font-weight: bold;\n            font-size: 11px;\n            text-align: center;\n            white-space: nowrap;\n        }\n\n        /* —— Stub classes for per‑report overrides —— */\n        .status-ready {}\n\n        .status-not-ready {}\n\n        .status-unknown {}\n\n        .badge-ready {}\n\n        .badge-not-ready {}\n\n        .badge-unknown {}\n\n        .badge-already {}\n    </style>\n</head>\n\n<body>\n    {% block content %}{% endblock %}\n</body>\n\n</html>"
  },
  "template": {
    "name": "OS Operating Systems Report v1.8",
    "template_css": "",
    "template_md": "{% block content %}\r\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-chart-treemap@2.0.1/dist/chartjs-chart-treemap.min.js\"></script>\r\n\r\n<style>\r\n    body { background-color: #f0f2f5; }\r\n    .section { margin-top: 30px; }\r\n\r\n    .summary-section {\r\n        display: flex; justify-content: space-between; gap: 20px;\r\n        margin-bottom: 30px; flex-wrap: wrap;\r\n    }\r\n    .summary-panel {\r\n        flex: 1 1 48%; min-width: 400px; height: 450px;\r\n        background-color: #ffffff; border: 1px solid #dee2e6; border-radius: 8px;\r\n        padding: 20px; box-sizing: border-box; display: flex; flex-direction: column;\r\n    }\r\n    .summary-panel h3 {\r\n        text-align: center; margin-top: 0; margin-bottom: 15px; font-size: 18px;\r\n        font-weight: 600; color: #333; flex-shrink: 0;\r\n    }\r\n    .chart-container { position: relative; flex-grow: 1; }\r\n\r\n    .filter-tabs {\r\n        position: relative; display: flex; justify-content: space-around; background-color: #e9ecef;\r\n        border-radius: 8px; padding: 5px; margin-bottom: 15px; flex-shrink: 0;\r\n    }\r\n    .filter-tab {\r\n        flex: 1; padding: 8px 10px; text-align: center; cursor: pointer; color: #495057;\r\n        font-weight: 500; transition: color 0.3s ease; z-index: 2; font-size: 13px; white-space: nowrap;\r\n    }\r\n    #tab-slider {\r\n        position: absolute; top: 5px; height: calc(100% - 10px); background-color: #ffffff;\r\n        border: 1px solid #dee2e6; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border-radius: 6px;\r\n        transition: left 0.3s ease, width 0.3s ease; z-index: 1;\r\n    }\r\n    .filter-tab.active { color: #007bff; font-weight: 600; }\r\n\r\n    .table-scroll-container { overflow-y: auto; flex-grow: 1; min-height: 0; }\r\n    .summary-table { width: 100%; border-collapse: collapse; font-size: 12px; }\r\n    .summary-table th, .summary-table td { padding: 8px 10px; border-bottom: 1px solid #e9ecef; text-align: left; }\r\n    .summary-table th { background-color: #f8f9fa; font-weight: 600; position: sticky; top: 0; }\r\n    .summary-table th.sortable { cursor: pointer; }\r\n    .summary-table th.sortable.sorted.asc::after { content: ' ▲'; color: #333; }\r\n    .summary-table th.sortable.sorted.desc::after { content: ' ▼'; color: #333; }\r\n\r\n    .report-table { width: 100%; border-collapse: collapse; background-color: #fff; border-radius: 8px; overflow: hidden; }\r\n    .report-table th, .report-table td { border-bottom: 1px solid #ddd; padding: 8px 10px; text-align: left; }\r\n    .report-table th { background-color: #f8f9fa; font-weight: 600; vertical-align: top; }\r\n    .th-topline { display: flex; align-items: center; justify-content: space-between; gap: 6px; cursor: pointer; }\r\n    .sort-indicator { font-size: 0.9em; color: #666; min-width: 1ch; }\r\n    .report-table thead th select {\r\n        width: 100%; margin-top: 5px; padding: 4px; border-radius: 4px; border: 1px solid #ccc; font-weight: normal; background: #fff;\r\n    }\r\n</style>\r\n\r\n<div class=\"report-header\">\r\n    <div class=\"header-logo\">\r\n        <img src=\"https://github.com/amidaware/reporting-templates/blob/master/assets/gbtnavy%20(256).png?raw=true\" alt=\"Amidaware Logo\" style=\"width: 80px; height: auto;\">\r\n    </div>\r\n    <div class=\"header-titles\">\r\n        <h1>Operating Systems Dashboard</h1>\r\n        <h2 id=\"report-subtitle\">Client: All | Site: All</h2>\r\n        <div class=\"row-count\" aria-live=\"polite\">\r\n            Filtered Agents: <strong><span id=\"visibleCount\">0</span></strong> of <span id=\"totalCount\">{{ data_sources.agents | length }}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"header-date\">\r\n        <h2>Report Date:<br>{{ report_run_timestamp.strftime('%B %d, %Y') }}</h2>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"summary-section\">\r\n    <div class=\"summary-panel\">\r\n         <h3>OS Distribution Summary</h3>\r\n         <div class=\"chart-container\">\r\n            <canvas id=\"osTreemapChart\"></canvas>\r\n         </div>\r\n    </div>\r\n    <div id=\"summary-table-container\" class=\"summary-panel\">\r\n    </div>\r\n</div>\r\n\r\n<div class=\"section\">\r\n    <table id=\"reportTable\" class=\"report-table\">\r\n        <thead>\r\n            <tr>\r\n                <th data-col-idx=\"0\">\r\n                    <div class=\"th-topline\"><span class=\"th-label\">Client</span><span class=\"sort-indicator\"></span></div>\r\n                    <select id=\"clientFilter\"><option value=\"all\">All Clients</option></select>\r\n                </th>\r\n                <th data-col-idx=\"1\">\r\n                    <div class=\"th-topline\"><span class=\"th-label\">Site</span><span class=\"sort-indicator\"></span></div>\r\n                    <select id=\"siteFilter\"><option value=\"all\">All Sites</option></select>\r\n                </th>\r\n                <th data-col-idx=\"2\">\r\n                    <div class=\"th-topline\"><span class=\"th-label\">Agent</span><span class=\"sort-indicator\"></span></div>\r\n                </th>\r\n                <th data-col-idx=\"3\">\r\n                    <div class=\"th-topline\"><span class=\"th-label\">User</span><span class=\"sort-indicator\"></span></div>\r\n                </th>\r\n                <th data-col-idx=\"4\">\r\n                    <div class=\"th-topline\"><span class=\"th-label\">Operating System</span><span class=\"sort-indicator\"></span></div>\r\n                    <select id=\"osFilter\"><option value=\"all\">All OS</option></select>\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {% for item in data_sources.agents %}\r\n            <tr>\r\n                <td>{{ item.site__client__name if item.site__client__name else 'N/A' }}</td>\r\n                <td>{{ item.site__name if item.site__name else 'N/A' }}</td>\r\n                <td>{{ item.hostname if item.hostname else 'N/A' }}</td>\r\n                <td>{{ item.last_logged_in_user if item.last_logged_in_user else 'N/A' }}</td>\r\n                <td>{{ item.operating_system|replace(\",\", \"\") if item.operating_system else 'N/A' }}</td>\r\n            </tr>\r\n            {% endfor %}\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<script>\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const mainTable = document.getElementById('reportTable');\r\n    if (!mainTable) {\r\n        console.error(\"Main report table not found.\");\r\n        return;\r\n    }\r\n    const mainTbody = mainTable.querySelector('tbody');\r\n    const selects = {\r\n        client: document.getElementById('clientFilter'),\r\n        site: document.getElementById('siteFilter'),\r\n        os: document.getElementById('osFilter')\r\n    };\r\n    const treemapCanvas = document.getElementById('osTreemapChart');\r\n    const summaryTableContainer = document.getElementById('summary-table-container');\r\n    const visibleCountEl = document.getElementById('visibleCount');\r\n    let osChartInstance = null;\r\n    let dashboardDetailedOsData = [];\r\n    let dashboardTreemapData = [];\r\n    let currentMainTableSort = { colIndex: 0, dirAsc: true };\r\n    let currentOsCategoryFilter = 'All';\r\n\r\n    const colorMap = {\r\n        'Windows 11': 'rgba(0, 120, 212, 0.8)', 'Windows 10': 'rgba(54, 162, 235, 0.8)',\r\n        'Win Server': 'rgba(255, 159, 64, 0.8)', 'Windows 7': 'rgba(220, 53, 69, 0.8)',\r\n        'Windows 8': 'rgba(253, 126, 20, 0.8)', 'macOS': 'rgba(153, 153, 153, 0.8)',\r\n        'Linux': 'rgba(75, 192, 192, 0.8)', 'Other': 'rgba(201, 203, 207, 0.8)'\r\n    };\r\n\r\n    function getMajorOS(os) {\r\n        const osLower = (os || '').toLowerCase();\r\n        if (osLower.includes(\"windows 11\")) return \"Windows 11\";\r\n        if (osLower.includes(\"windows 10\")) return \"Windows 10\";\r\n        if (osLower.includes(\"windows server\")) return \"Win Server\";\r\n        if (osLower.includes(\"windows 7\")) return \"Windows 7\";\r\n        if (osLower.includes(\"windows 8\")) return \"Windows 8\";\r\n        if (osLower.includes(\"darwin\")) return \"macOS\";\r\n        if (osLower.includes(\"debian\") || osLower.includes(\"ubuntu\")) return \"Linux\";\r\n        return \"Other\";\r\n    }\r\n\r\n    function setupDashboardHTML() {\r\n        const categories = ['All', ...Object.keys(colorMap)];\r\n        let tabsHtml = `<div class=\"filter-tabs\" id=\"filter-tabs\"><div id=\"tab-slider\"></div>${categories.map(cat => `<div class=\"filter-tab\" data-filter=\"${cat}\">${cat}</div>`).join('')}</div>`;\r\n        let tableHtml = `<h3>Version Breakdown</h3>${tabsHtml}<div class=\"table-scroll-container\"><table class=\"summary-table\" id=\"summaryReportTable\"><thead><tr><th class=\"sortable\">OS Version</th><th>Count</th></tr></thead><tbody></tbody></table></div>`;\r\n        summaryTableContainer.innerHTML = tableHtml;\r\n        document.querySelectorAll('.filter-tab').forEach(tab => tab.addEventListener('click', () => {\r\n            const filter = tab.getAttribute('data-filter');\r\n            currentOsCategoryFilter = filter;\r\n            moveSlider(tab);\r\n            updateReport();\r\n        }));\r\n    }\r\n\r\n    function renderTreemap(filter) {\r\n        if (osChartInstance) osChartInstance.destroy();\r\n        const dataToRender = (filter === 'All') ? dashboardTreemapData : dashboardTreemapData.filter(d => d.majorOS === filter);\r\n        \r\n        const formatLabel = (build, majorOS) => {\r\n            let label = build;\r\n            if (majorOS === 'Windows 10' || majorOS === 'Windows 11' || majorOS === 'Win Server') {\r\n                label = label.replace(/^(Windows 10|Windows 11|Windows Server)\\s*/i, '').trim();\r\n            }\r\n            return label;\r\n        };\r\n\r\n        osChartInstance = new Chart(treemapCanvas.getContext('2d'), {\r\n            type: 'treemap',\r\n            data: { datasets: [{\r\n                tree: dataToRender, key: 'value', groups: ['majorOS', 'build'],\r\n                backgroundColor: (c) => colorMap[c.raw?._data?.majorOS || c.raw?.g] || colorMap['Other'],\r\n                captions: { display: true, color: 'white', font: { size: 16 } },\r\n                labels: {\r\n                    display: true, color: 'white',\r\n                    formatter: (c) => formatLabel(c.raw._data.build, c.raw._data.majorOS).split(' (build')[0]\r\n                }\r\n            }]},\r\n            options: {\r\n                plugins: {\r\n                    tooltip: {\r\n                        callbacks: {\r\n                            title: (c) => {\r\n                                const item = c[0].raw;\r\n                                return item.g || (item._data ? item._data.majorOS : '');\r\n                            },\r\n                            label: (c) => {\r\n                                const item = c.raw;\r\n                                if (item._data && item._data.build) {\r\n                                    const label = formatLabel(item._data.build, item._data.majorOS);\r\n                                    return `${label}: ${item.v.toLocaleString()} agents`;\r\n                                }\r\n                                if (item.g) {\r\n                                    return `Total: ${item.v.toLocaleString()} agents`;\r\n                                }\r\n                                return `${item.v.toLocaleString()} agents`;\r\n                            }\r\n                        }\r\n                    },\r\n                    legend: { display: false }\r\n                },\r\n                maintainAspectRatio: false\r\n            }\r\n        });\r\n    }\r\n\r\n    function populateSummaryTable(filter) {\r\n        const summaryTableBody = document.getElementById('summaryReportTable').querySelector('tbody');\r\n        const dataToRender = (filter === 'All') ? dashboardDetailedOsData : dashboardDetailedOsData.filter(d => d.category === filter);\r\n        dataToRender.sort((a, b) => b.count - a.count);\r\n        summaryTableBody.innerHTML = dataToRender.map(d => `<tr><td>${d.os}</td><td>${d.count}</td></tr>`).join('');\r\n    }\r\n\r\n    function moveSlider(tab) {\r\n        const tabs = document.querySelectorAll('.filter-tab');\r\n        const slider = document.getElementById('tab-slider');\r\n        if (!tab || !slider) return;\r\n        tabs.forEach(t => t.classList.remove('active'));\r\n        tab.classList.add('active');\r\n        slider.style.width = `${tab.offsetWidth}px`;\r\n        slider.style.left = `${tab.offsetLeft}px`;\r\n    }\r\n\r\n    function updateDashboard(visibleOsList) {\r\n        try {\r\n            const osCounts = {};\r\n            visibleOsList.forEach(os => {\r\n                const osString = os || 'Unknown';\r\n                osCounts[osString] = (osCounts[osString] || 0) + 1;\r\n            });\r\n            dashboardDetailedOsData = [];\r\n            dashboardTreemapData = [];\r\n            for (const [os, count] of Object.entries(osCounts)) {\r\n                let majorOS = getMajorOS(os);\r\n                dashboardDetailedOsData.push({ os: os, count: count, category: majorOS });\r\n                dashboardTreemapData.push({ majorOS: majorOS, build: os, value: count });\r\n            }\r\n\r\n            if (!document.querySelector('.filter-tab.active')) {\r\n                const initialTab = document.querySelector('.filter-tab[data-filter=\"All\"]');\r\n                if (initialTab) moveSlider(initialTab);\r\n            }\r\n\r\n            populateSummaryTable(currentOsCategoryFilter);\r\n            renderTreemap(currentOsCategoryFilter);\r\n        } catch (error) {\r\n            console.error(\"Failed to update dashboard:\", error);\r\n            summaryTableContainer.innerHTML = '<h3>Error Updating Dashboard</h3><p>Could not process data.</p>';\r\n        }\r\n    }\r\n\r\n    const getCellText = (row, colIndex) => row.cells[colIndex]?.textContent.trim() || '';\r\n\r\n    function buildOptionsFromSet(selectEl, dataSet, allLabel) {\r\n        const currentVal = selectEl.value;\r\n        const options = [...dataSet].sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));\r\n        selectEl.innerHTML = `<option value=\"all\">${allLabel}</option>` + options.map(v => `<option value=\"${v}\">${v}</option>`).join('');\r\n        selectEl.value = [...dataSet].includes(currentVal) ? currentVal : 'all';\r\n    }\r\n\r\n    function updateMainTableDropdowns() {\r\n        const visibleRows = Array.from(mainTbody.rows).filter(r => r.style.display !== 'none');\r\n        const clients = new Set(visibleRows.map(r => getCellText(r, 0)));\r\n        const sites = new Set(visibleRows.map(r => getCellText(r, 1)));\r\n        const oss = new Set(visibleRows.map(r => getCellText(r, 4)));\r\n        buildOptionsFromSet(selects.client, clients, 'All Clients');\r\n        buildOptionsFromSet(selects.site, sites, 'All Sites');\r\n        buildOptionsFromSet(selects.os, oss, 'All OS');\r\n    }\r\n\r\n    function sortMainTable(colIndex, toggle = true) {\r\n        if (toggle) {\r\n            if (currentMainTableSort.colIndex === colIndex) {\r\n                currentMainTableSort.dirAsc = !currentMainTableSort.dirAsc;\r\n            } else {\r\n                currentMainTableSort.colIndex = colIndex;\r\n                currentMainTableSort.dirAsc = true;\r\n            }\r\n        }\r\n        document.querySelectorAll('#reportTable .sort-indicator').forEach(el => el.textContent = '');\r\n        const indicator = document.querySelector(`#reportTable th[data-col-idx=\"${colIndex}\"] .sort-indicator`);\r\n        if (indicator) indicator.textContent = currentMainTableSort.dirAsc ? '▲' : '▼';\r\n        const rows = Array.from(mainTbody.rows);\r\n        rows.sort((a, b) => {\r\n            const vA = getCellText(a, colIndex);\r\n            const vB = getCellText(b, colIndex);\r\n            const compare = vA.localeCompare(vB, undefined, { numeric: true, sensitivity: 'base' });\r\n            return currentMainTableSort.dirAsc ? compare : -compare;\r\n        });\r\n        rows.forEach(row => mainTbody.appendChild(row));\r\n    }\r\n\r\n    function updateReport() {\r\n        const clientVal = selects.client.value;\r\n        const siteVal = selects.site.value;\r\n        const osVal = selects.os.value;\r\n        const visibleOsList = [];\r\n        let visibleRowCount = 0;\r\n\r\n        Array.from(mainTbody.rows).forEach(row => {\r\n            const osText = getCellText(row, 4);\r\n            const majorOS = getMajorOS(osText);\r\n            const show = (clientVal === 'all' || getCellText(row, 0) === clientVal) &&\r\n                         (siteVal === 'all' || getCellText(row, 1) === siteVal) &&\r\n                         (osVal === 'all' || osText === osVal) &&\r\n                         (currentOsCategoryFilter === 'All' || majorOS === currentOsCategoryFilter);\r\n            row.style.display = show ? '' : 'none';\r\n            if (show) {\r\n                visibleOsList.push(getCellText(row, 4));\r\n                visibleRowCount++;\r\n            }\r\n        });\r\n\r\n        visibleCountEl.textContent = String(visibleRowCount);\r\n        updateMainTableDropdowns();\r\n        document.getElementById('report-subtitle').textContent = `Client: ${clientVal === 'all' ? 'All' : clientVal} | Site: ${siteVal === 'all' ? 'All' : siteVal}`;\r\n        updateDashboard(visibleOsList);\r\n    }\r\n    \r\n    function init() {\r\n        setupDashboardHTML();\r\n        Object.values(selects).forEach(sel => sel.addEventListener('change', updateReport));\r\n        document.querySelectorAll('#reportTable th').forEach(th => {\r\n            th.querySelector('.th-topline')?.addEventListener('click', () => sortMainTable(parseInt(th.dataset.colIdx, 10)));\r\n        });\r\n        const allRows = Array.from(mainTbody.rows);\r\n        const allClients = new Set(allRows.map(r => getCellText(r, 0)));\r\n        const allSites = new Set(allRows.map(r => getCellText(r, 1)));\r\n        const allOss = new Set(allRows.map(r => getCellText(r, 4)));\r\n        buildOptionsFromSet(selects.client, allClients, 'All Clients');\r\n        buildOptionsFromSet(selects.site, allSites, 'All Sites');\r\n        buildOptionsFromSet(selects.os, allOss, 'All OS');\r\n        updateReport();\r\n        sortMainTable(0, false);\r\n    }\r\n\r\n    init();\r\n});\r\n</script>\r\n{% endblock %}",
    "type": "html",
    "depends_on": [],
    "template_variables": "data_sources:\r\n  agents:\r\n    model: agent\r\n    only:\r\n      - hostname\r\n      - site__name\r\n      - site__client__name\r\n      - last_logged_in_user\r\n      - operating_system\r\nreport_run_timestamp: !now"
  },
  "assets": []
}